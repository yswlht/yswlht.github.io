<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>shiro + jwt模板</title>
    <url>/2020/01/22/shiro-jwt%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h3 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- lombok --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- mysql --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--shiro--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- jwt --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.auth0&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;java-jwt&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="jwtUtil"><a href="#jwtUtil" class="headerlink" title="jwtUtil"></a>jwtUtil</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import com.auth0.jwt.JWT;</span><br><span class="line">import com.auth0.jwt.JWTVerifier;</span><br><span class="line">import com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line">import com.auth0.jwt.exceptions.JWTDecodeException;</span><br><span class="line">import com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author hxt</span><br><span class="line"> * @date 2020/1/22 15:53</span><br><span class="line"> */</span><br><span class="line">public class JwtUtil &#123;</span><br><span class="line"></span><br><span class="line">    private static final long EXPIRE_TIME = 180 * 60 * 1000;</span><br><span class="line"></span><br><span class="line">    /** 校验token</span><br><span class="line">     * @param token 密钥</span><br><span class="line">     * @param secret 用户的密码</span><br><span class="line">     * */</span><br><span class="line">    public static boolean verify(String token, String username, String secret) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Algorithm algorithm = Algorithm.HMAC256(secret);</span><br><span class="line">            JWTVerifier verifier = JWT.require(algorithm)</span><br><span class="line">                    .withClaim(<span class="string">"username"</span>, username)</span><br><span class="line">                    .build();</span><br><span class="line">            DecodedJWT jwt = verifier.verify(token);</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** 获取token中的用户名 */</span><br><span class="line">    public static String getUsername(String token) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            DecodedJWT jwt = JWT.decode(token);</span><br><span class="line">            <span class="built_in">return</span> jwt.getClaim(<span class="string">"username"</span>).asString();</span><br><span class="line">        &#125; catch (JWTDecodeException e) &#123;</span><br><span class="line">            <span class="built_in">return</span> null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** 加密</span><br><span class="line">     * @param secret 用户的密码</span><br><span class="line">     * */</span><br><span class="line">    public static String sign(String username, String secret) &#123;</span><br><span class="line">        Date date = new Date(System.currentTimeMillis() + EXPIRE_TIME);</span><br><span class="line">        Algorithm algorithm = Algorithm.HMAC256(secret);</span><br><span class="line">        <span class="built_in">return</span> JWT.create()</span><br><span class="line">                .withClaim(<span class="string">"username"</span>, username)</span><br><span class="line">                .withExpiresAt(date)</span><br><span class="line">                .sign(algorithm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="jwtToken"><a href="#jwtToken" class="headerlink" title="jwtToken"></a>jwtToken</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author hxt</span><br><span class="line"> * @date 2020/1/22 15:54</span><br><span class="line"> */</span><br><span class="line">public class JwtToken implements AuthenticationToken &#123;</span><br><span class="line"></span><br><span class="line">    private String token;</span><br><span class="line"></span><br><span class="line">    public JwtToken(String token) &#123;</span><br><span class="line">        this.token = token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object <span class="function"><span class="title">getPrincipal</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object <span class="function"><span class="title">getCredentials</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="jwtFilter"><a href="#jwtFilter" class="headerlink" title="jwtFilter"></a>jwtFilter</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import com.example.demo.common.JwtToken;</span><br><span class="line">import org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletRequest;</span><br><span class="line">import javax.servlet.ServletResponse;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author hxt</span><br><span class="line"> * @date 2020/1/22 15:56</span><br><span class="line"> */</span><br><span class="line">public class JwtFilter extends BasicHttpAuthenticationFilter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean isLoginAttempt(ServletRequest request, ServletResponse response) &#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        String authorization = req.getHeader(<span class="string">"cok"</span>);</span><br><span class="line">        <span class="built_in">return</span> StringUtils.isNotEmpty(authorization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean executeLogin(ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">        String authorization = httpServletRequest.getHeader(<span class="string">"cok"</span>);</span><br><span class="line">        JwtToken token = new JwtToken(authorization);</span><br><span class="line">        getSubject(request, response).login(token);</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isLoginAttempt(request, response)) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                executeLogin(request, response);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                response401(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean preHandle(ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse httpServletResponse = (HttpServletResponse) response;</span><br><span class="line">        <span class="keyword">if</span> (httpServletRequest.getMethod().equals(RequestMethod.OPTIONS.name())) &#123;</span><br><span class="line">            httpServletResponse.setStatus(HttpStatus.OK.value());</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> super.preHandle(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void response401(ServletRequest req, ServletResponse resp) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            HttpServletResponse httpServletResponse = (HttpServletResponse) resp;</span><br><span class="line">            httpServletResponse.sendRedirect(<span class="string">"/error"</span>);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            //<span class="keyword">do</span> nothing</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义realm"><a href="#自定义realm" class="headerlink" title="自定义realm"></a>自定义realm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import com.example.demo.common.JwtToken;</span><br><span class="line">import com.example.demo.module.Users;</span><br><span class="line">import com.example.demo.service.UserService;</span><br><span class="line">import com.example.demo.utils.JwtUtil;</span><br><span class="line">import org.apache.shiro.authc.*;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationException;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author hxt</span><br><span class="line"> * @date 2020/1/22 16:02</span><br><span class="line"> */</span><br><span class="line">public class MyRealm extends AuthorizingRealm &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean supports(AuthenticationToken token) &#123;</span><br><span class="line">        <span class="built_in">return</span> token instanceof JwtToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** 认证 */</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class="line">        String token = (String) authenticationToken.getCredentials();</span><br><span class="line">        String username = JwtUtil.getUsername(token);</span><br><span class="line">        <span class="keyword">if</span> (username == null) &#123;</span><br><span class="line">            throw new AccountException(<span class="string">"没接收到用户名"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        // 到数据库查找用户</span><br><span class="line">        Users user = userService.getUsers();</span><br><span class="line">        <span class="keyword">if</span> (user == null) &#123;</span><br><span class="line">            throw new UnknownAccountException(<span class="string">"没找到用户"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!JwtUtil.verify(token, username, user.getUsersPassword())) &#123;</span><br><span class="line">            throw new AuthenticationException(<span class="string">"Username or password error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> new SimpleAuthenticationInfo(token, token, <span class="string">"user_realm"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** 授权 */</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class="line">        <span class="keyword">if</span> (principalCollection == null) &#123;</span><br><span class="line">            throw new AuthorizationException(<span class="string">"未找到请求体"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String username = JwtUtil.getUsername(principalCollection.toString());</span><br><span class="line">        // 查找用户权限</span><br><span class="line">        String role = <span class="string">""</span>;</span><br><span class="line">        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();</span><br><span class="line">        info.addStringPermission(role);</span><br><span class="line">        <span class="built_in">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ShiroConfig"><a href="#ShiroConfig" class="headerlink" title="ShiroConfig"></a>ShiroConfig</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package com.example.demo.config;</span><br><span class="line"></span><br><span class="line">import com.example.demo.filter.JwtFilter;</span><br><span class="line">import com.example.demo.realm.MyRealm;</span><br><span class="line">import org.apache.shiro.mgt.DefaultSessionStorageEvaluator;</span><br><span class="line">import org.apache.shiro.mgt.DefaultSubjectDAO;</span><br><span class="line">import org.apache.shiro.spring.LifecycleBeanPostProcessor;</span><br><span class="line">import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;</span><br><span class="line">import org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line">import org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line">import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.DependsOn;</span><br><span class="line"></span><br><span class="line">import javax.servlet.Filter;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.LinkedHashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author hxt</span><br><span class="line"> * @date 2020/1/22 16:06</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class ShiroConfig &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**配置自己的Realm*/</span><br><span class="line">    @Bean</span><br><span class="line">    MyRealm <span class="function"><span class="title">myRealm</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> new MyRealm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**把自己的Realm加入容器*/</span><br><span class="line">    @Bean(<span class="string">"securityManager"</span>)</span><br><span class="line">    public DefaultWebSecurityManager <span class="function"><span class="title">securityManager</span></span>() &#123;</span><br><span class="line">        DefaultWebSecurityManager manager = new DefaultWebSecurityManager();</span><br><span class="line">        manager.setRealm(myRealm());</span><br><span class="line"></span><br><span class="line">        // 去除shiro中的session</span><br><span class="line">        DefaultSubjectDAO subjectDAO = new DefaultSubjectDAO();</span><br><span class="line">        DefaultSessionStorageEvaluator defaultSessionStorageEvaluator = new DefaultSessionStorageEvaluator();</span><br><span class="line">        defaultSessionStorageEvaluator.setSessionStorageEnabled(<span class="literal">false</span>);</span><br><span class="line">        subjectDAO.setSessionStorageEvaluator(defaultSessionStorageEvaluator);</span><br><span class="line">        manager.setSubjectDAO(subjectDAO);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name = <span class="string">"shiroFilter"</span>)</span><br><span class="line">    ShiroFilterFactoryBean <span class="function"><span class="title">shiroFilterFactoryBean</span></span>() &#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = new ShiroFilterFactoryBean();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Filter&gt; filterMap = new HashMap&lt;&gt;(0);</span><br><span class="line">        // 配置jwt拦截器</span><br><span class="line">        filterMap.put(<span class="string">"jwt"</span>, new JwtFilter());</span><br><span class="line">        bean.setFilters(filterMap);</span><br><span class="line">        //就是被拦截下来的请求暂时都换成这个</span><br><span class="line">        bean.setLoginUrl(<span class="string">"/error"</span>);</span><br><span class="line"></span><br><span class="line">        bean.setSecurityManager(securityManager());</span><br><span class="line">        Map&lt;String, String&gt; map = new LinkedHashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"/**"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">        map.put(<span class="string">"/error"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(map);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 添加注解权限 */</span><br><span class="line">    @Bean</span><br><span class="line">    @DependsOn(<span class="string">"lifecycleBeanPostProcessor"</span>)</span><br><span class="line">    public DefaultAdvisorAutoProxyCreator <span class="function"><span class="title">defaultAdvisorAutoProxyCreator</span></span>() &#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        defaultAdvisorAutoProxyCreator.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">return</span> defaultAdvisorAutoProxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public LifecycleBeanPostProcessor <span class="function"><span class="title">lifecycleBeanPostProcessor</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> new LifecycleBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(DefaultWebSecurityManager securityManager) &#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor advisor = new AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        advisor.setSecurityManager(securityManager);</span><br><span class="line">        <span class="built_in">return</span> advisor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置完成后就可以在Controller使用了，在需要登录才能访问的接口上访添加@RequiresAuthentication就行了。</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>shiro</tag>
        <tag>jwt</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
