<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Springboot依赖</title>
    <url>/2020/04/05/Springboot%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<p>这是Springboot pom.xml里的依赖，记录下来方便以后查找，不全，以后有没记录的再更新。</p>
<h3 id="fastdfs"><a href="#fastdfs" class="headerlink" title="fastdfs"></a>fastdfs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.github.tobato&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;fastdfs-client&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.26.1-RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">	&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="druid池"><a href="#druid池" class="headerlink" title="druid池"></a>druid池</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.1.14&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="mybatis-plus"><a href="#mybatis-plus" class="headerlink" title="mybatis-plus"></a>mybatis-plus</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h3><p>需要下载插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">	&lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="swagger2"><a href="#swagger2" class="headerlink" title="swagger2"></a>swagger2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">	&lt;exclusions&gt;</span><br><span class="line">		&lt;exclusion&gt;</span><br><span class="line">			&lt;groupId&gt;io.swagger&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;swagger-models&lt;/artifactId&gt;</span><br><span class="line">		&lt;/exclusion&gt;</span><br><span class="line">	&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;io.swagger&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;swagger-models&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.5.21&lt;/version&gt;</span><br><span class="line">	&lt;exclusions&gt;</span><br><span class="line">		&lt;exclusion&gt;</span><br><span class="line">			&lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt;</span><br><span class="line">			&lt;groupId&gt;io.swagger&lt;/groupId&gt;</span><br><span class="line">		&lt;/exclusion&gt;</span><br><span class="line">	&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.9.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.auth0&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;java-jwt&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;3.8.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="aop"><a href="#aop" class="headerlink" title="aop"></a>aop</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;aspectjrt&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.9.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="wechatPay"><a href="#wechatPay" class="headerlink" title="wechatPay"></a>wechatPay</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;jdom&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;jdom&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.qcloud&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;cos_api&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;5.4.4&lt;/version&gt;</span><br><span class="line">	&lt;exclusions&gt;</span><br><span class="line">		&lt;exclusion&gt;</span><br><span class="line">			&lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">		&lt;/exclusion&gt;</span><br><span class="line">	&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;core&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;javase&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>附二维码生成代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public static void writerPayImage(HttpServletResponse response, String contents) throws Exception&#123;</span><br><span class="line">	ServletOutputStream out = response.getOutputStream();</span><br><span class="line">	try &#123;</span><br><span class="line">		Map&lt;EncodeHintType,Object&gt; hints = new HashMap&lt;EncodeHintType,Object&gt;();</span><br><span class="line">		hints.put(EncodeHintType.CHARACTER_SET,<span class="string">"UTF-8"</span>);</span><br><span class="line">		hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);</span><br><span class="line">		hints.put(EncodeHintType.MARGIN, 0);</span><br><span class="line">		// contents为扫描二维码后的内容</span><br><span class="line">		BitMatrix bitMatrix = new MultiFormatWriter().encode(contents, BarcodeFormat.QR_CODE,300,300, hints);</span><br><span class="line">		MatrixToImageWriter.writeToStream(bitMatrix,<span class="string">"jpg"</span>, out);</span><br><span class="line">	&#125;catch (Exception e)&#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">		throw new Exception(<span class="string">"生成二维码失败！"</span>);</span><br><span class="line">	&#125;finally &#123;</span><br><span class="line">		<span class="keyword">if</span>(out != null)&#123;</span><br><span class="line">			out.flush();</span><br><span class="line">			out.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="StringUtil"><a href="#StringUtil" class="headerlink" title="StringUtil"></a>StringUtil</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;3.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="邮箱验证码"><a href="#邮箱验证码" class="headerlink" title="邮箱验证码"></a>邮箱验证码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;2.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>附发送代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public void sendSimpleMail(String to, String title, String content)&#123;</span><br><span class="line">	SimpleMailMessage message = new SimpleMailMessage();</span><br><span class="line">	// 发送邮件的邮箱，需要配置</span><br><span class="line">	message.setFrom(from);</span><br><span class="line">	// 接收邮件的邮箱</span><br><span class="line">	message.setTo(to);</span><br><span class="line">	// 邮件标题</span><br><span class="line">	message.setSubject(title);</span><br><span class="line">	// 邮件正文</span><br><span class="line">	message.setText(content);</span><br><span class="line">	mailSender.send(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常量配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mail:</span><br><span class="line">    default-encoding: utf-8</span><br><span class="line">    host: smtp.qq.com</span><br><span class="line">    username: 1727035918@qq.com</span><br><span class="line">    password: fucmfgtvuwnndchh</span><br><span class="line">    properties:</span><br><span class="line">      mail:</span><br><span class="line">        smtp:</span><br><span class="line">          auth: <span class="literal">true</span></span><br><span class="line">          starttls:</span><br><span class="line">            <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">            required: <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令</title>
    <url>/2020/04/01/Linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>ls 列出当前目录的文件或文件夹<br>ls -a 列出目录所有文件，包含以.开始的隐藏文件</p>
<p>cd &lt;路径&gt; 切换目录至路径</p>
<p>pwd 查看当前路径</p>
<p>mkdir 创建文件夹<br>mkdir -p 创建文件夹，没有的文件夹也会创建</p>
<p>rmdir 删除文件夹，不能删除非空文件夹</p>
<p>chmod 777 &lt;文件全称&gt; 给文件添加权限，777为所有权限</p>
<p>rm &lt;选项&gt; 文件 删除一个目录中的一个或多个文件或目录<br>-i 删除前逐一询问确认<br>-rf 删除并不会确认</p>
<p>mv 移动文件，如果第二个参数是目录，第一个参数可以是以空格分隔的文件或目录<br>mv -i file1 file2 将文件file1改名为file2，如果file2存在，则询问是否覆盖</p>
<p>cp 复制</p>
<a id="more"></a>

<p>cat filename 显示整个文件<br>cat &gt; filename 创建一个文件<br>cat file1 file2 &gt; file 将几个文件合并为一个文件<br>-b 对非空输出行号<br>-n 输出所有行号</p>
<p>ps 查看进程信息<br>ps -aux 查看运行的进程<br>ps -aux|grep name 查看name的运行的进程</p>
<p>netstat -antp|grep name 查看进程带有name的信息</p>
<p>find -name file 查找名字带有file的文件，从当前目录及子目录下查找 </p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>fastdfs</title>
    <url>/2020/03/24/fastdfs/</url>
    <content><![CDATA[<p>今天配置了一遍fastdfs，由于不是我的服务器，所以nginx方面没有试过，不过测试后是可以上传文件了的，所以无伤大雅。这里是<a href="https://www.jianshu.com/p/1c71ae024e5e" target="_blank" rel="noopener">原文</a>,下面就是配置过程。</p>
<h2 id="tracker安装"><a href="#tracker安装" class="headerlink" title="tracker安装"></a>tracker安装</h2><p>安装libfastcommon、perl依赖，下载<a href="https://github.com/happyfish100/libfastcommon" target="_blank" rel="noopener">文件</a>，并上传到服务器，运行make.sh。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost usr]<span class="comment"># cd libfastcommon-master</span></span><br><span class="line">[root@localhost libfastcommon-master]<span class="comment"># ./make.sh</span></span><br><span class="line">[root@localhost libfastcommon-master]<span class="comment"># ./make.sh install</span></span><br><span class="line">[root@localhost libfastcommon-master]<span class="comment"># yum install perl</span></span><br></pre></td></tr></table></figure>

<p>这里可能会有一个小问题，就是会跳出permission denied错误，我遇到的问题是make.sh没有【x】的全县，可以通过命令手动添加权限，简单粗暴。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost libfastcommon-master]<span class="comment"># chmod 777 make.sh</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>还要下载编译安装<a href="https://github.com/happyfish100/fastdfs" target="_blank" rel="noopener">fastdfs</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost usr] <span class="comment"># cd fastdfs-master</span></span><br><span class="line">[root@localhost fastdfs-master] <span class="comment"># ./make.sh</span></span><br><span class="line">[root@localhost fastdfs-master] <span class="comment"># ./make.sh  install</span></span><br></pre></td></tr></table></figure>

<p>可能遇到的问题跟上面一样。然后创建fastdfs数据目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -pv /data/fastdfs/tracker</span><br></pre></td></tr></table></figure>

<p>复制tracker.conf.sample到tracker.conf，并修改内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp etc/fdfs/tracker.conf.sample etc/fdfs/tracker.conf</span><br><span class="line">vim  etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">base_path=/data/fastdfs/tracker</span><br></pre></td></tr></table></figure>

<p>这里又可能会遇到问题（其实是我自己遇到的），就是提示没有这个文件或目录，不用担心，直接进入到etc/fdfs里面，直接复制，不管地址。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/fdfs</span><br><span class="line">cp tracker.conf.sample tracker.conf</span><br><span class="line">vim tracker.conf</span><br></pre></td></tr></table></figure>

<p>然后启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>  /usr/bin</span><br><span class="line">fdfs_trackerd /etc/fdfs/tracker.conf restart</span><br></pre></td></tr></table></figure>

<p>这里可以验证一下是否是22122端口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># netstat -antp|grep trackerd</span></span><br><span class="line">tcp        0      0 0.0.0.0:22122           0.0.0.0:*               LISTEN      31046/fdfs_trackerd</span><br></pre></td></tr></table></figure>

<h2 id="storage安装"><a href="#storage安装" class="headerlink" title="storage安装"></a>storage安装</h2><p>接下来是storage的安装，你可以安装到不同的服务器，也可以安装到同一个服务器，这里我安装到同一个服务器，如果安装到不同的服务器，还需要下载安装fastdfs的配置，方法同上面一样。<br>然后是修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -pv /data/fastdfs/storage</span><br><span class="line">cp etc/fdfs/storage.conf.sample etc/fdfs/storage.conf</span><br><span class="line">vim  etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure>

<p>遇到相同报错，解决办法跟上面一样。接下来是修改内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">disabled=<span class="literal">false</span> <span class="comment">#启用配置文件</span></span><br><span class="line">group_name=group1 <span class="comment">#组名，根据实际情况修改</span></span><br><span class="line">port=23000 <span class="comment">#设置 storage 的端口号</span></span><br><span class="line">base_path=/data/fastdfs/storage <span class="comment">#设置 storage 的日志目录（需预先创建）</span></span><br><span class="line">store_path_count=1 <span class="comment">#存储路径个数，需要和 store_path 个数匹配</span></span><br><span class="line">store_path0=/data/fastdfs/storage <span class="comment">#存储路径</span></span><br><span class="line">tracker_server=192.168.1.177:22122 <span class="comment">#tracker 服务器的 IP 地址和端口号</span></span><br></pre></td></tr></table></figure>

<p>然后启动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/bin</span><br><span class="line">./fdfs_storaged  /etc/fdfs/storage.conf restart</span><br></pre></td></tr></table></figure>

<h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p>接下来是配置客户端的代码，使用的框架是springboot，首先是pom.xml里的配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">	&lt;scope&gt;<span class="built_in">test</span>&lt;/scope&gt;</span><br><span class="line">	&lt;exclusions&gt;</span><br><span class="line">		&lt;exclusion&gt;</span><br><span class="line">			&lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span><br><span class="line">			&lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span><br><span class="line">		&lt;/exclusion&gt;</span><br><span class="line">	&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;com.github.tobato&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;fastdfs-client&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.26.1-RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>然后是application.yml。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdfs:</span><br><span class="line">  so-timeout: 1500</span><br><span class="line">  connect-timeout: 600</span><br><span class="line">  pool:</span><br><span class="line">    jmx-enabled: <span class="literal">false</span></span><br><span class="line">  thumb-image:</span><br><span class="line">    width: 100</span><br><span class="line">    height: 100</span><br><span class="line">  tracker-list: 192.168.1.177:22122</span><br></pre></td></tr></table></figure>

<p>tracker-list就是tracker服务器的地址。要记得把服务器的22122和23000端口打开。然后在运行文件上面添加@Import(FdfsClientConfig.class)注解。接下来就是上传的代码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private FastFileStorageClient mFastFileStorageClient;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">void contextLoads() throws FileNotFoundException &#123;</span><br><span class="line">	// 获取文件</span><br><span class="line">	File file = new File(<span class="string">"E:\\QMDownload\\timg.jpg"</span>);</span><br><span class="line">	String fileName=file.getName();</span><br><span class="line">	String extName = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>)+1);</span><br><span class="line">	FileInputStream inputStream=new FileInputStream(file);</span><br><span class="line">	// 上传文件</span><br><span class="line">	StorePath storePath = mFastFileStorageClient.uploadFile(inputStream, file.length(), extName, null);</span><br><span class="line">	// 上传的组，就是storage.conf里配置的group</span><br><span class="line">	System.out.println(storePath.getGroup());</span><br><span class="line">	// 上传的组里的地址</span><br><span class="line">	System.out.println(storePath.getPath());</span><br><span class="line">	// 上传的完整地址</span><br><span class="line">	System.out.println(storePath.getFullPath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里上传的完整地址其实是在上面设置的/data/fastdfs/storage里面，具体的位置就是去掉组和前缀，比如上面这段代码运行后获取到的完整地址其实是group1/M00/00/00/J2Jd7l55fTqAcmPGAAB3uf-Qsig694.jpg，去掉group1/M00，后面就是storage里面的地址，一层层点进去就能找到文件。<br>这里给上nginx里面的相关配置，当然我上面说过，因为服务器原因我没试过，只测试过上传。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen       8888;</span><br><span class="line">	server_name  localhost;</span><br><span class="line">	location ~/group1/M00 &#123;</span><br><span class="line">		root /data/fastdfs/storage;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里没有测试过，这里没有测试过，这里没有测试过。结束了。</p>
]]></content>
      <categories>
        <category>configuration</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>fastdfs</tag>
      </tags>
  </entry>
  <entry>
    <title>微信支付搭建</title>
    <url>/2020/03/10/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>这是基于SpringBoot搭建的微信支付系统，使用的是JS支付，别的支付方式暂时不会。</p>
<p>首先在pom.xml里添加依赖，可能会缺一些依赖，但问题不大</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- 微信扫码支付依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;jdom&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jdom&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.qcloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cos_api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.4.4&lt;/version&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 二维码 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javase&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.56&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;3.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>然后是支付的主要代码，参数你可以传你自己需要的参数，里面的公众号ID啊、商户号啊之类的自己去申请吧，个人就别搞了，申请很麻烦的，我这里是用了公司的，就不给了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public String wxPayUrl() throws Exception &#123;</span><br><span class="line">	//订单号，要长不然会报错，多长不知道</span><br><span class="line">    String outTradeNo = xxxxxxxxxxxxxxxxx;</span><br><span class="line">	//购买的商品名</span><br><span class="line">    String orderName = xxxxxx;</span><br><span class="line">	//价格</span><br><span class="line">    Float price = 0.01f;</span><br><span class="line">    HashMap&lt;String, String&gt; data = new HashMap&lt;String, String&gt;();</span><br><span class="line">    //公众账号ID：自己找</span><br><span class="line">    data.put(<span class="string">"appid"</span>, WechatPay.APP_ID);</span><br><span class="line">    //商户号：自己找</span><br><span class="line">    data.put(<span class="string">"mch_id"</span>, WechatPay.MCH_ID);</span><br><span class="line">    //随机字符串</span><br><span class="line">    data.put(<span class="string">"nonce_str"</span>, WechatUtil.getNonceStr());</span><br><span class="line">    //商品描述</span><br><span class="line">    data.put(<span class="string">"body"</span>, <span class="string">"购买商品【"</span> + orderName + <span class="string">"】"</span>);</span><br><span class="line">    //商户订单号</span><br><span class="line">    data.put(<span class="string">"out_trade_no"</span>, outTradeNo);</span><br><span class="line">    //标价币种</span><br><span class="line">    data.put(<span class="string">"fee_type"</span>,<span class="string">"CNY"</span>);</span><br><span class="line">    //标价金额，单位为币种的最小单位，这里是分，不能带小数</span><br><span class="line">    data.put(<span class="string">"total_fee"</span>,String.valueOf(1));</span><br><span class="line">    //服务器的IP</span><br><span class="line">    data.put(<span class="string">"spbill_create_ip"</span>, WechatPay.CREATE_IP);</span><br><span class="line">    //微信通知地址，即扫描成功后会访问这个接口，一定要是外网可以访问的地址</span><br><span class="line">    data.put(<span class="string">"notify_url"</span>, WechatPay.NOTIFY_URL);</span><br><span class="line">    //交易类型</span><br><span class="line">    data.put(<span class="string">"trade_type"</span>, <span class="string">"NATIVE"</span>);</span><br><span class="line">    //签名类型</span><br><span class="line">    data.put(<span class="string">"sign_type"</span>, <span class="string">"MD5"</span>);</span><br><span class="line">    //签名：API_KEY自己找</span><br><span class="line">    data.put(<span class="string">"sign"</span>, WechatUtil.getSignature(data, WechatPay.API_KEY, <span class="string">"MD5"</span>));</span><br><span class="line"></span><br><span class="line">    String requestXML = WechatUtil.mapToXml(data);</span><br><span class="line">    String reponseString = HttpsClient.httpsRequestReturnString(WechatConstants.PAY_UNIFIEDORDER, HttpsClient.METHOD_POST, requestXML);</span><br><span class="line">    Map&lt;String, String&gt; resultMap = WechatUtil.processResponseXml(reponseString, <span class="string">"MD5"</span>);</span><br><span class="line">    <span class="keyword">if</span> (resultMap.get(WechatConstants.RETURN_CODE).equals(<span class="string">"SUCCESS"</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!resultMap.get(<span class="string">"code_url"</span>).isEmpty()) &#123;</span><br><span class="line">			//可以自行添加一些储存方法来作微信返回时判断是哪个订单，这里用的是redis，不做代码，可自行搜索教程</span><br><span class="line">            redisUtil.set(outTradeNo, orderId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> resultMap.get(<span class="string">"code_url"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就是上面带着的各种转换方法，首先是WechatUtil</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class WechatUtil &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加密/校验流程如下：</span><br><span class="line">     * 1. 将token、timestamp、nonce三个参数进行字典序排序&lt;br&gt;</span><br><span class="line">     * 2. 将三个参数字符串拼接成一个字符串进行sha1加密&lt;br&gt;</span><br><span class="line">     * 3. 开发者获得加密后的字符串可与signature对比，标识该请求来源于微信&lt;br&gt;</span><br><span class="line">     *</span><br><span class="line">     * @param token Token验证密钥</span><br><span class="line">     * @param signature 微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数，nonce参数</span><br><span class="line">     * @param timestamp 时间戳</span><br><span class="line">     * @param nonce 随机数</span><br><span class="line">     * @<span class="built_in">return</span> 验证成功返回：<span class="literal">true</span>,失败返回：<span class="literal">false</span></span><br><span class="line">     */</span><br><span class="line">    public static boolean checkSignature(String token, String signature, String timestamp, String nonce) &#123;</span><br><span class="line">        List&lt;String&gt; params = new ArrayList&lt;String&gt;();</span><br><span class="line">        params.add(token);</span><br><span class="line">        params.add(timestamp);</span><br><span class="line">        params.add(nonce);</span><br><span class="line">        //1. 将token、timestamp、nonce三个参数进行字典序排序</span><br><span class="line">        Collections.sort(params, new Comparator&lt;String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public int compare(String o1, String o2) &#123;</span><br><span class="line">                <span class="built_in">return</span> o1.compareTo(o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //2. 将三个参数字符串拼接成一个字符串进行sha1加密</span><br><span class="line">        String temp = SHA1.encode(params.get(0) + params.get(1) + params.get(2));</span><br><span class="line">        //3. 开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</span><br><span class="line">        <span class="built_in">return</span> temp.equals(signature);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 输入流转化为字符串</span><br><span class="line">     * @param inputStream 流</span><br><span class="line">     * @<span class="built_in">return</span> String 字符串</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static String getStreamString(InputStream inputStream) throws Exception&#123;</span><br><span class="line">        StringBuffer buffer=new StringBuffer();</span><br><span class="line">        InputStreamReader inputStreamReader = null;</span><br><span class="line">        BufferedReader bufferedReader = null;</span><br><span class="line">        try&#123;</span><br><span class="line">            inputStreamReader=new InputStreamReader(inputStream, WechatConstants.DEFAULT_CHARSET);</span><br><span class="line">            bufferedReader=new BufferedReader(inputStreamReader);</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span>((line=bufferedReader.readLine())!=null)&#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">                buffer.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch(Exception e)&#123;</span><br><span class="line">            throw new Exception();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            <span class="keyword">if</span>(bufferedReader != null)&#123;</span><br><span class="line">                bufferedReader.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(inputStreamReader != null)&#123;</span><br><span class="line">                inputStreamReader.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(inputStream != null)&#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> buffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取随机字符串 Nonce Str</span><br><span class="line">     * @<span class="built_in">return</span> String 随机字符串</span><br><span class="line">     */</span><br><span class="line">    public static String <span class="function"><span class="title">getNonceStr</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>, <span class="string">""</span>).substring(0, 32);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成签名. 注意，若含有sign_type字段，必须和signType参数保持一致。</span><br><span class="line">     * @param data 待签名数据</span><br><span class="line">     * @param key API密钥</span><br><span class="line">     * @<span class="built_in">return</span> 签名</span><br><span class="line">     */</span><br><span class="line">    public static String getSignature(final Map&lt;String, String&gt; data, String key,String signType) throws Exception &#123;</span><br><span class="line">        Set&lt;String&gt; keySet = data.keySet();</span><br><span class="line">        String[] keyArray = keySet.toArray(new String[keySet.size()]);</span><br><span class="line">        Arrays.sort(keyArray);</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (String k : keyArray) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k.equals(<span class="string">"sign"</span>)) &#123;</span><br><span class="line">                <span class="built_in">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            //参数值为空，则不参与签名</span><br><span class="line">            <span class="keyword">if</span> (data.get(k).trim().length() &gt; 0) &#123;</span><br><span class="line">                sb.append(k).append(<span class="string">"="</span>).append(data.get(k).trim()).append(<span class="string">"&amp;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">"key="</span>).append(key);</span><br><span class="line">        <span class="keyword">if</span> (signType.equals(WechatConstants.SING_MD5)) &#123;</span><br><span class="line">            <span class="built_in">return</span> MD5(sb.toString()).toUpperCase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (signType.equals(WechatConstants.SING_HMACSHA256)) &#123;</span><br><span class="line">            <span class="built_in">return</span> HMACSHA256(sb.toString(), key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            throw new Exception(String.format(<span class="string">"Invalid sign_type: %s"</span>, signType));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成 MD5</span><br><span class="line">     * @param data 待处理数据</span><br><span class="line">     * @<span class="built_in">return</span> MD5结果</span><br><span class="line">     */</span><br><span class="line">    public static String MD5(String data) throws Exception &#123;</span><br><span class="line">        MessageDigest md = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">        byte[] array = md.digest(data.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (byte item : array) &#123;</span><br><span class="line">            sb.append(Integer.toHexString((item &amp; 0xFF) | 0x100).substring(1, 3));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> sb.toString().toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成 HMACSHA256</span><br><span class="line">     * @param data 待处理数据</span><br><span class="line">     * @param key 密钥</span><br><span class="line">     * @<span class="built_in">return</span> 加密结果</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static String HMACSHA256(String data, String key) throws Exception &#123;</span><br><span class="line">        Mac sha256_HMAC = Mac.getInstance(<span class="string">"HmacSHA256"</span>);</span><br><span class="line">        SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(<span class="string">"UTF-8"</span>), <span class="string">"HmacSHA256"</span>);</span><br><span class="line">        sha256_HMAC.init(secret_key);</span><br><span class="line">        byte[] array = sha256_HMAC.doFinal(data.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (byte item : array) &#123;</span><br><span class="line">            sb.append(Integer.toHexString((item &amp; 0xFF) | 0x100).substring(1, 3));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> sb.toString().toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param data Map类型数据</span><br><span class="line">     * @<span class="built_in">return</span> XML格式的字符串</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static String mapToXml(Map&lt;String, String&gt; data) throws Exception &#123;</span><br><span class="line">        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">        DocumentBuilder documentBuilder= documentBuilderFactory.newDocumentBuilder();</span><br><span class="line">        org.w3c.dom.Document document = documentBuilder.newDocument();</span><br><span class="line">        org.w3c.dom.Element root = document.createElement(<span class="string">"xml"</span>);</span><br><span class="line">        document.appendChild(root);</span><br><span class="line">        <span class="keyword">for</span> (String key: data.keySet()) &#123;</span><br><span class="line">            String value = data.get(key);</span><br><span class="line">            <span class="keyword">if</span> (value == null) &#123;</span><br><span class="line">                value = <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            value = value.trim();</span><br><span class="line">            org.w3c.dom.Element filed = document.createElement(key);</span><br><span class="line">            filed.appendChild(document.createTextNode(value));</span><br><span class="line">            root.appendChild(filed);</span><br><span class="line">        &#125;</span><br><span class="line">        TransformerFactory tf = TransformerFactory.newInstance();</span><br><span class="line">        Transformer transformer = tf.newTransformer();</span><br><span class="line">        DOMSource <span class="built_in">source</span> = new DOMSource(document);</span><br><span class="line">        transformer.setOutputProperty(OutputKeys.ENCODING, <span class="string">"UTF-8"</span>);</span><br><span class="line">        transformer.setOutputProperty(OutputKeys.INDENT, <span class="string">"yes"</span>);</span><br><span class="line">        StringWriter writer = new StringWriter();</span><br><span class="line">        StreamResult result = new StreamResult(writer);</span><br><span class="line">        transformer.transform(<span class="built_in">source</span>, result);</span><br><span class="line">        String output = writer.getBuffer().toString();</span><br><span class="line">        try &#123;</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 处理 HTTPS API返回数据，转换成Map对象。return_code为SUCCESS时，验证签名。</span><br><span class="line">     * @param xmlStr API返回的XML格式数据</span><br><span class="line">     * @<span class="built_in">return</span> Map类型数据</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static Map&lt;String, String&gt; processResponseXml(String xmlStr,String signType) throws Exception &#123;</span><br><span class="line">        String RETURN_CODE = WechatConstants.RETURN_CODE;</span><br><span class="line">        String return_code;</span><br><span class="line">        Map&lt;String, String&gt; respData = xmlToMap(xmlStr);</span><br><span class="line">        <span class="keyword">if</span> (respData.containsKey(RETURN_CODE)) &#123;</span><br><span class="line">            return_code = respData.get(RETURN_CODE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            throw new Exception(String.format(<span class="string">"No `return_code` in XML: %s"</span>, xmlStr));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (return_code.equals(<span class="string">"FAIL"</span>)) &#123;</span><br><span class="line">            <span class="built_in">return</span> respData;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (return_code.equals(<span class="string">"SUCCESS"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isResponseSignatureValid(respData, signType)) &#123;</span><br><span class="line">                <span class="built_in">return</span> respData;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                throw new Exception(String.format(<span class="string">"Invalid sign value in XML: %s"</span>, xmlStr));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            throw new Exception(String.format(<span class="string">"return_code value %s is invalid in XML: %s"</span>, return_code, xmlStr));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * XML格式字符串转换为Map</span><br><span class="line">     * @param strXML XML字符串</span><br><span class="line">     * @<span class="built_in">return</span> XML数据转换后的Map</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static Map&lt;String, String&gt; xmlToMap(String strXML) throws Exception &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Map&lt;String, String&gt; data = new HashMap&lt;String, String&gt;();</span><br><span class="line">            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line"></span><br><span class="line">            String FEATURE = <span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>;</span><br><span class="line">            documentBuilderFactory.setFeature(FEATURE, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            FEATURE = <span class="string">"http://xml.org/sax/features/external-general-entities"</span>;</span><br><span class="line">            documentBuilderFactory.setFeature(FEATURE, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            FEATURE = <span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>;</span><br><span class="line">            documentBuilderFactory.setFeature(FEATURE, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            FEATURE = <span class="string">"http://apache.org/xml/features/nonvalidating/load-external-dtd"</span>;</span><br><span class="line">            documentBuilderFactory.setFeature(FEATURE, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            documentBuilderFactory.setXIncludeAware(<span class="literal">false</span>);</span><br><span class="line">            documentBuilderFactory.setExpandEntityReferences(<span class="literal">false</span>);</span><br><span class="line">            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();</span><br><span class="line">            InputStream stream = new ByteArrayInputStream(strXML.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">            org.w3c.dom.Document doc = documentBuilder.parse(stream);</span><br><span class="line">            doc.getDocumentElement().normalize();</span><br><span class="line">            NodeList nodeList = doc.getDocumentElement().getChildNodes();</span><br><span class="line">            <span class="keyword">for</span> (int idx = 0; idx &lt; nodeList.getLength(); ++idx) &#123;</span><br><span class="line">                Node node = nodeList.item(idx);</span><br><span class="line">                <span class="keyword">if</span> (node.getNodeType() == Node.ELEMENT_NODE) &#123;</span><br><span class="line">                    org.w3c.dom.Element element = (org.w3c.dom.Element) node;</span><br><span class="line">                    data.put(element.getNodeName(), element.getTextContent());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                stream.close();</span><br><span class="line">            &#125; catch (Exception ex) &#123;</span><br><span class="line">                // <span class="keyword">do</span> nothing</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">return</span> data;</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            throw ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断xml数据的sign是否有效，必须包含sign字段，否则返回<span class="literal">false</span>。</span><br><span class="line">     * @param reqData 向wxpay post的请求数据</span><br><span class="line">     * @<span class="built_in">return</span> 签名是否有效</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    private static boolean isResponseSignatureValid(final Map&lt;String, String&gt; reqData,String signType) throws Exception &#123;</span><br><span class="line">        // 返回数据的签名方式和请求中给定的签名方式是一致的,API_KEY自己找</span><br><span class="line">        <span class="built_in">return</span> isSignatureValid(reqData, WechatPay.API_KEY, signType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断签名是否正确，必须包含sign字段，否则返回<span class="literal">false</span>。</span><br><span class="line">     * @param data Map类型数据</span><br><span class="line">     * @param key API密钥</span><br><span class="line">     * @param signType 签名方式</span><br><span class="line">     * @<span class="built_in">return</span> 签名是否正确</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static boolean isSignatureValid(Map&lt;String, String&gt; data, String key, String signType) throws Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (!data.containsKey(<span class="string">"sign"</span>)) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String sign = data.get(<span class="string">"sign"</span>);</span><br><span class="line">        <span class="built_in">return</span> getSignature(data, key, signType).equals(sign);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成支付二维码</span><br><span class="line">     * @param response 响应</span><br><span class="line">     * @param contents url链接</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static void writerPayImage(HttpServletResponse response, String contents) throws Exception&#123;</span><br><span class="line">        ServletOutputStream out = response.getOutputStream();</span><br><span class="line">        try &#123;</span><br><span class="line">            Map&lt;EncodeHintType,Object&gt; hints = new HashMap&lt;EncodeHintType,Object&gt;();</span><br><span class="line">            hints.put(EncodeHintType.CHARACTER_SET,<span class="string">"UTF-8"</span>);</span><br><span class="line">            hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);</span><br><span class="line">            hints.put(EncodeHintType.MARGIN, 0);</span><br><span class="line">            BitMatrix bitMatrix = new MultiFormatWriter().encode(contents, BarcodeFormat.QR_CODE,300,300, hints);</span><br><span class="line">            MatrixToImageWriter.writeToStream(bitMatrix,<span class="string">"jpg"</span>, out);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            throw new Exception(<span class="string">"生成二维码失败！"</span>);</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            <span class="keyword">if</span>(out != null)&#123;</span><br><span class="line">                out.flush();</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回信息给微信</span><br><span class="line">     * @param response</span><br><span class="line">     * @param content 内容</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static void responsePrint(HttpServletResponse response, String content) throws Exception&#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/xml"</span>);</span><br><span class="line">        response.getWriter().<span class="built_in">print</span>(content);</span><br><span class="line">        response.getWriter().flush();</span><br><span class="line">        response.getWriter().close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后是HttpsClient</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class HttpsClient &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * GET请求方式</span><br><span class="line">     */</span><br><span class="line">    public static final String METHOD_GET = <span class="string">"GET"</span>;</span><br><span class="line">    /**</span><br><span class="line">     * POST请求方式</span><br><span class="line">     */</span><br><span class="line">    public static final String METHOD_POST = <span class="string">"POST"</span>;</span><br><span class="line">    /**</span><br><span class="line">     * 连接超时时间</span><br><span class="line">     */</span><br><span class="line">    private static Integer CONNECTION_TIMEOUT = 15000;</span><br><span class="line">    /**</span><br><span class="line">     * 请求超时时间</span><br><span class="line">     */</span><br><span class="line">    private static Integer READ_TIMEOUT = 15000;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发起https请求</span><br><span class="line">     * @param requestUrl 请求地址</span><br><span class="line">     * @param requestMethod 请求方式（Get或者post）</span><br><span class="line">     * @param postData 提交数据</span><br><span class="line">     * @<span class="built_in">return</span> JSONObject</span><br><span class="line">     */</span><br><span class="line">    public static JSONObject httpsRequestReturnJSONObject(String requestUrl, String requestMethod, String postData) throws Exception&#123;</span><br><span class="line">        JSONObject  jsonObject = JSONObject.parseObject(HttpsClient.httpsRequestReturnString(requestUrl,requestMethod,postData));</span><br><span class="line">        System.out.println(<span class="string">"jsonObjectDate:  "</span> + jsonObject);</span><br><span class="line">        <span class="built_in">return</span> jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 发起https请求</span><br><span class="line">     * @param requestUrl 请求地址</span><br><span class="line">     * @param requestMethod 请求方式（Get或者post）</span><br><span class="line">     * @param postData 提交数据</span><br><span class="line">     * @<span class="built_in">return</span> String</span><br><span class="line">     */</span><br><span class="line">    public static String httpsRequestReturnString(String requestUrl, String requestMethod, String postData) throws Exception&#123;</span><br><span class="line">        String response;</span><br><span class="line">        HttpsURLConnection httpsUrlConnection = null;</span><br><span class="line">        try&#123;</span><br><span class="line">            //创建https请求证书</span><br><span class="line">            TrustManager[] tm=&#123;new MyX509TrustManager()&#125;;</span><br><span class="line">            //创建SSLContext管理器对像，使用我们指定的信任管理器初始化</span><br><span class="line">            SSLContext sslContext=SSLContext.getInstance(<span class="string">"SSL"</span>,<span class="string">"SunJSSE"</span>);</span><br><span class="line">            sslContext.init(null, tm, new java.security.SecureRandom());</span><br><span class="line">            SSLSocketFactory ssf=sslContext.getSocketFactory();</span><br><span class="line"></span><br><span class="line">            // 创建URL对象</span><br><span class="line">            URL url= new URL(requestUrl);</span><br><span class="line">            // 创建HttpsURLConnection对象，并设置其SSLSocketFactory对象</span><br><span class="line">            httpsUrlConnection=(HttpsURLConnection)url.openConnection();</span><br><span class="line">            //设置ssl证书</span><br><span class="line">            httpsUrlConnection.setSSLSocketFactory(ssf);</span><br><span class="line"></span><br><span class="line">            //设置header信息</span><br><span class="line">            httpsUrlConnection.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">            //设置User-Agent信息</span><br><span class="line">            httpsUrlConnection.setRequestProperty(<span class="string">"User-Agent"</span>, <span class="string">"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.146 Safari/537.36"</span>);</span><br><span class="line">            //设置可接受信息</span><br><span class="line">            httpsUrlConnection.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">            //设置可输入信息</span><br><span class="line">            httpsUrlConnection.setDoInput(<span class="literal">true</span>);</span><br><span class="line">            //不使用缓存</span><br><span class="line">            httpsUrlConnection.setUseCaches(<span class="literal">false</span>);</span><br><span class="line">            //设置请求方式（GET/POST）</span><br><span class="line">            httpsUrlConnection.setRequestMethod(requestMethod);</span><br><span class="line">            //设置连接超时时间</span><br><span class="line">            <span class="keyword">if</span> (CONNECTION_TIMEOUT &gt; 0) &#123;</span><br><span class="line">                httpsUrlConnection.setConnectTimeout(CONNECTION_TIMEOUT);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                //默认10秒超时</span><br><span class="line">                httpsUrlConnection.setConnectTimeout(10000);</span><br><span class="line">            &#125;</span><br><span class="line">            //设置请求超时</span><br><span class="line">            <span class="keyword">if</span> (READ_TIMEOUT &gt; 0) &#123;</span><br><span class="line">                httpsUrlConnection.setReadTimeout(READ_TIMEOUT);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                //默认10秒超时</span><br><span class="line">                httpsUrlConnection.setReadTimeout(10000);</span><br><span class="line">            &#125;</span><br><span class="line">            //设置编码</span><br><span class="line">            httpsUrlConnection.setRequestProperty(<span class="string">"Charsert"</span>, WechatConstants.DEFAULT_CHARSET);</span><br><span class="line"></span><br><span class="line">            //判断是否需要提交数据</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.equals(requestMethod,HttpsClient.METHOD_POST) &amp;&amp; StringUtils.isNotBlank(postData))&#123;</span><br><span class="line">                //讲参数转换为字节提交</span><br><span class="line">                byte[] bytes = postData.getBytes(WechatConstants.DEFAULT_CHARSET);</span><br><span class="line">                //设置头信息</span><br><span class="line">                httpsUrlConnection.setRequestProperty(<span class="string">"Content-Length"</span>, Integer.toString(bytes.length));</span><br><span class="line">                //开始连接</span><br><span class="line">                httpsUrlConnection.connect();</span><br><span class="line">                //防止中文乱码</span><br><span class="line">                OutputStream outputStream=httpsUrlConnection.getOutputStream();</span><br><span class="line">                outputStream.write(postData.getBytes(WechatConstants.DEFAULT_CHARSET));</span><br><span class="line">                outputStream.flush();</span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                //开始连接</span><br><span class="line">                httpsUrlConnection.connect();</span><br><span class="line">            &#125;</span><br><span class="line">            response = WechatUtil.getStreamString(httpsUrlConnection.getInputStream());</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            throw new Exception();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            <span class="keyword">if</span> (httpsUrlConnection != null) &#123;</span><br><span class="line">                // 关闭连接</span><br><span class="line">                httpsUrlConnection.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态变量WechatConstants</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class WechatConstants &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 默认编码</span><br><span class="line">     */</span><br><span class="line">    public static final String DEFAULT_CHARSET = <span class="string">"UTF-8"</span>;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 统一下单-扫描支付</span><br><span class="line">     */</span><br><span class="line">    public static String PAY_UNIFIEDORDER = <span class="string">"https://api.mch.weixin.qq.com/pay/unifiedorder"</span>;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 请求成功返回码</span><br><span class="line">     */</span><br><span class="line">    public final static String ERRCODE_OK_CODE = <span class="string">"0"</span>;</span><br><span class="line">    /**</span><br><span class="line">     * 错误的返回码的Key</span><br><span class="line">     */</span><br><span class="line">    public final static String ERRCODE = <span class="string">"errcode"</span>;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回状态码</span><br><span class="line">     */</span><br><span class="line">    public final static String RETURN_CODE= <span class="string">"return_code"</span>;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * access_token 字符串</span><br><span class="line">     */</span><br><span class="line">    public final static String ACCESS_TOKEN = <span class="string">"access_token"</span>;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 签名类型 MD5</span><br><span class="line">     */</span><br><span class="line">    public final static String SING_MD5 = <span class="string">"MD5"</span>;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 签名类型 HMAC-SHA256</span><br><span class="line">     */</span><br><span class="line">    public final static String SING_HMACSHA256 = <span class="string">"HMAC-SHA256"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>WechatPay,里面的一些静态变量需要自己改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class WechatPay &#123;</span><br><span class="line"></span><br><span class="line">    /** 微信开发平台应用ID（公众号ID）*/</span><br><span class="line">    public static final String APP_ID = <span class="string">"xxxxxxxxxxxx"</span>;</span><br><span class="line"></span><br><span class="line">    /** 商户号（商户号ID） */</span><br><span class="line">    public static final String MCH_ID = <span class="string">"xxxxxxxx"</span>;</span><br><span class="line"></span><br><span class="line">    /** API key（商户号里面的） */</span><br><span class="line">    public static final String API_KEY = <span class="string">"xxxxxxxx"</span>;</span><br><span class="line"></span><br><span class="line">    /** 发起支付的Ip */</span><br><span class="line">    public static final String CREATE_IP = <span class="string">"127.0.0.1"</span>;</span><br><span class="line"></span><br><span class="line">    /** 回调地址（需要外网可以访问的IP） */</span><br><span class="line">    public static final String  NOTIFY_URL = <span class="string">"xxx.xxx.xxx/xxx/xxxx"</span>;</span><br><span class="line"></span><br><span class="line">    /** 微信统一下单接口 */</span><br><span class="line">    public static final String UFDODER_URL = <span class="string">"https://api.mch.weixin.qq.com/pay/unifiedorder"</span>;</span><br><span class="line"></span><br><span class="line">    /** 应用对应的凭证（在公众号里面） */</span><br><span class="line">    public static final String APP_SECRET = <span class="string">"xxxxxxxxxx"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后的返回值是一个图片，可以用WechatUtil.writerPayImage(response, wechatPayService.wxPayUrl())来返回给前端一张二维码，用户扫码成功后会调用NOTIFY_URL里的接口，接口方法如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public HttpResult&lt;Object&gt; payForCourse(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">	Integer bool = 0;</span><br><span class="line">	//商户订单号</span><br><span class="line">	String outTradeNo = null;</span><br><span class="line">	String xmlContent = <span class="string">"&lt;xml&gt;"</span> +</span><br><span class="line">			<span class="string">"&lt;return_code&gt;&lt;![CDATA[FAIL]]&gt;&lt;/return_code&gt;"</span> +</span><br><span class="line">			<span class="string">"&lt;return_msg&gt;&lt;![CDATA[签名失败]]&gt;&lt;/return_msg&gt;"</span> +</span><br><span class="line">			<span class="string">"&lt;/xml&gt;"</span>;</span><br><span class="line">	try &#123;</span><br><span class="line">		String requstXml = WechatUtil.getStreamString(request.getInputStream());</span><br><span class="line">		System.out.println(<span class="string">"requstXml : "</span> + requstXml);</span><br><span class="line">		Map&lt;String,String&gt; map = WechatUtil.xmlToMap(requstXml);</span><br><span class="line">		String returnCode = map.get(WechatConstants.RETURN_CODE);</span><br><span class="line">		//校验一下</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.isNotBlank(returnCode) &amp;&amp; StringUtils.equals(returnCode, <span class="string">"SUCCESS"</span>) &amp;&amp; WechatUtil.isSignatureValid(map, WechatPay.API_KEY, signType)) &#123;</span><br><span class="line">			//商户订单号</span><br><span class="line">			outTradeNo = map.get(<span class="string">"out_trade_no"</span>);</span><br><span class="line">			System.out.println(<span class="string">"outTradeNo : "</span>+ outTradeNo);</span><br><span class="line">			//微信支付订单号</span><br><span class="line">			String transactionId = map.get(<span class="string">"transaction_id"</span>);</span><br><span class="line">			System.out.println(<span class="string">"transactionId : "</span>+ transactionId);</span><br><span class="line">			//支付完成时间</span><br><span class="line">			SimpleDateFormat payFormat= new SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>);</span><br><span class="line">			Date payDate = payFormat.parse(map.get(<span class="string">"time_end"</span>));</span><br><span class="line"></span><br><span class="line">			SimpleDateFormat systemFormat= new SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">			System.out.println(<span class="string">"支付时间："</span> + systemFormat.format(payDate));</span><br><span class="line">			//获得之前储存的值然后修改订单状态为已支付并删除redis里储存的值</span><br><span class="line">			Integer orderId = (Integer) redisUtil.get(outTradeNo);</span><br><span class="line">			redisUtil.del(outTradeNo);</span><br><span class="line">			xmlContent = <span class="string">"&lt;xml&gt;"</span> +</span><br><span class="line">					<span class="string">"&lt;return_code&gt;&lt;![CDATA[SUCCESS]]&gt;&lt;/return_code&gt;"</span> +</span><br><span class="line">					<span class="string">"&lt;return_msg&gt;&lt;![CDATA[OK]]&gt;&lt;/return_msg&gt;"</span> +</span><br><span class="line">					<span class="string">"&lt;/xml&gt;"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; catch (Exception e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	WechatUtil.responsePrint(response, xmlContent);</span><br><span class="line">	<span class="keyword">if</span> (bool == 1) &#123;</span><br><span class="line">		<span class="built_in">return</span> HttpResult.ok(<span class="string">"付款成功"</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">return</span> HttpResult.error(<span class="string">"付款失败"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>wechat</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro + jwt模板</title>
    <url>/2020/01/22/shiro-jwt%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h3 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- lombok --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- mysql --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--shiro--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- jwt --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.auth0&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;java-jwt&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="jwtUtil"><a href="#jwtUtil" class="headerlink" title="jwtUtil"></a>jwtUtil</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import com.auth0.jwt.JWT;</span><br><span class="line">import com.auth0.jwt.JWTVerifier;</span><br><span class="line">import com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line">import com.auth0.jwt.exceptions.JWTDecodeException;</span><br><span class="line">import com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author hxt</span><br><span class="line"> * @date 2020/1/22 15:53</span><br><span class="line"> */</span><br><span class="line">public class JwtUtil &#123;</span><br><span class="line"></span><br><span class="line">    private static final long EXPIRE_TIME = 180 * 60 * 1000;</span><br><span class="line"></span><br><span class="line">    /** 校验token</span><br><span class="line">     * @param token 密钥</span><br><span class="line">     * @param secret 用户的密码</span><br><span class="line">     * */</span><br><span class="line">    public static boolean verify(String token, String username, String secret) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Algorithm algorithm = Algorithm.HMAC256(secret);</span><br><span class="line">            JWTVerifier verifier = JWT.require(algorithm)</span><br><span class="line">                    .withClaim(<span class="string">"username"</span>, username)</span><br><span class="line">                    .build();</span><br><span class="line">            DecodedJWT jwt = verifier.verify(token);</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** 获取token中的用户名 */</span><br><span class="line">    public static String getUsername(String token) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            DecodedJWT jwt = JWT.decode(token);</span><br><span class="line">            <span class="built_in">return</span> jwt.getClaim(<span class="string">"username"</span>).asString();</span><br><span class="line">        &#125; catch (JWTDecodeException e) &#123;</span><br><span class="line">            <span class="built_in">return</span> null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** 加密</span><br><span class="line">     * @param secret 用户的密码</span><br><span class="line">     * */</span><br><span class="line">    public static String sign(String username, String secret) &#123;</span><br><span class="line">        Date date = new Date(System.currentTimeMillis() + EXPIRE_TIME);</span><br><span class="line">        Algorithm algorithm = Algorithm.HMAC256(secret);</span><br><span class="line">        <span class="built_in">return</span> JWT.create()</span><br><span class="line">                .withClaim(<span class="string">"username"</span>, username)</span><br><span class="line">                .withExpiresAt(date)</span><br><span class="line">                .sign(algorithm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="jwtToken"><a href="#jwtToken" class="headerlink" title="jwtToken"></a>jwtToken</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author hxt</span><br><span class="line"> * @date 2020/1/22 15:54</span><br><span class="line"> */</span><br><span class="line">public class JwtToken implements AuthenticationToken &#123;</span><br><span class="line"></span><br><span class="line">    private String token;</span><br><span class="line"></span><br><span class="line">    public JwtToken(String token) &#123;</span><br><span class="line">        this.token = token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object <span class="function"><span class="title">getPrincipal</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object <span class="function"><span class="title">getCredentials</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="jwtFilter"><a href="#jwtFilter" class="headerlink" title="jwtFilter"></a>jwtFilter</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import com.example.demo.common.JwtToken;</span><br><span class="line">import org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletRequest;</span><br><span class="line">import javax.servlet.ServletResponse;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author hxt</span><br><span class="line"> * @date 2020/1/22 15:56</span><br><span class="line"> */</span><br><span class="line">public class JwtFilter extends BasicHttpAuthenticationFilter &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean isLoginAttempt(ServletRequest request, ServletResponse response) &#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        String authorization = req.getHeader(<span class="string">"cok"</span>);</span><br><span class="line">        <span class="built_in">return</span> StringUtils.isNotEmpty(authorization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean executeLogin(ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">        String authorization = httpServletRequest.getHeader(<span class="string">"cok"</span>);</span><br><span class="line">        JwtToken token = new JwtToken(authorization);</span><br><span class="line">        getSubject(request, response).login(token);</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isLoginAttempt(request, response)) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                executeLogin(request, response);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                response401(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean preHandle(ServletRequest request, ServletResponse response) throws Exception &#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse httpServletResponse = (HttpServletResponse) response;</span><br><span class="line">        <span class="keyword">if</span> (httpServletRequest.getMethod().equals(RequestMethod.OPTIONS.name())) &#123;</span><br><span class="line">            httpServletResponse.setStatus(HttpStatus.OK.value());</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> super.preHandle(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void response401(ServletRequest req, ServletResponse resp) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            HttpServletResponse httpServletResponse = (HttpServletResponse) resp;</span><br><span class="line">            httpServletResponse.sendRedirect(<span class="string">"/error"</span>);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            //<span class="keyword">do</span> nothing</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义realm"><a href="#自定义realm" class="headerlink" title="自定义realm"></a>自定义realm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import com.example.demo.common.JwtToken;</span><br><span class="line">import com.example.demo.module.Users;</span><br><span class="line">import com.example.demo.service.UserService;</span><br><span class="line">import com.example.demo.utils.JwtUtil;</span><br><span class="line">import org.apache.shiro.authc.*;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationException;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author hxt</span><br><span class="line"> * @date 2020/1/22 16:02</span><br><span class="line"> */</span><br><span class="line">public class MyRealm extends AuthorizingRealm &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean supports(AuthenticationToken token) &#123;</span><br><span class="line">        <span class="built_in">return</span> token instanceof JwtToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** 认证 */</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class="line">        String token = (String) authenticationToken.getCredentials();</span><br><span class="line">        String username = JwtUtil.getUsername(token);</span><br><span class="line">        <span class="keyword">if</span> (username == null) &#123;</span><br><span class="line">            throw new AccountException(<span class="string">"没接收到用户名"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        // 到数据库查找用户</span><br><span class="line">        Users user = userService.getUsers();</span><br><span class="line">        <span class="keyword">if</span> (user == null) &#123;</span><br><span class="line">            throw new UnknownAccountException(<span class="string">"没找到用户"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!JwtUtil.verify(token, username, user.getUsersPassword())) &#123;</span><br><span class="line">            throw new AuthenticationException(<span class="string">"Username or password error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> new SimpleAuthenticationInfo(token, token, <span class="string">"user_realm"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** 授权 */</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class="line">        <span class="keyword">if</span> (principalCollection == null) &#123;</span><br><span class="line">            throw new AuthorizationException(<span class="string">"未找到请求体"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String username = JwtUtil.getUsername(principalCollection.toString());</span><br><span class="line">        // 查找用户权限</span><br><span class="line">        String role = <span class="string">""</span>;</span><br><span class="line">        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();</span><br><span class="line">        info.addStringPermission(role);</span><br><span class="line">        <span class="built_in">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ShiroConfig"><a href="#ShiroConfig" class="headerlink" title="ShiroConfig"></a>ShiroConfig</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package com.example.demo.config;</span><br><span class="line"></span><br><span class="line">import com.example.demo.filter.JwtFilter;</span><br><span class="line">import com.example.demo.realm.MyRealm;</span><br><span class="line">import org.apache.shiro.mgt.DefaultSessionStorageEvaluator;</span><br><span class="line">import org.apache.shiro.mgt.DefaultSubjectDAO;</span><br><span class="line">import org.apache.shiro.spring.LifecycleBeanPostProcessor;</span><br><span class="line">import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;</span><br><span class="line">import org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line">import org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line">import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.DependsOn;</span><br><span class="line"></span><br><span class="line">import javax.servlet.Filter;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.LinkedHashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author hxt</span><br><span class="line"> * @date 2020/1/22 16:06</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class ShiroConfig &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**配置自己的Realm*/</span><br><span class="line">    @Bean</span><br><span class="line">    MyRealm <span class="function"><span class="title">myRealm</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> new MyRealm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**把自己的Realm加入容器*/</span><br><span class="line">    @Bean(<span class="string">"securityManager"</span>)</span><br><span class="line">    public DefaultWebSecurityManager <span class="function"><span class="title">securityManager</span></span>() &#123;</span><br><span class="line">        DefaultWebSecurityManager manager = new DefaultWebSecurityManager();</span><br><span class="line">        manager.setRealm(myRealm());</span><br><span class="line"></span><br><span class="line">        // 去除shiro中的session</span><br><span class="line">        DefaultSubjectDAO subjectDAO = new DefaultSubjectDAO();</span><br><span class="line">        DefaultSessionStorageEvaluator defaultSessionStorageEvaluator = new DefaultSessionStorageEvaluator();</span><br><span class="line">        defaultSessionStorageEvaluator.setSessionStorageEnabled(<span class="literal">false</span>);</span><br><span class="line">        subjectDAO.setSessionStorageEvaluator(defaultSessionStorageEvaluator);</span><br><span class="line">        manager.setSubjectDAO(subjectDAO);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name = <span class="string">"shiroFilter"</span>)</span><br><span class="line">    ShiroFilterFactoryBean <span class="function"><span class="title">shiroFilterFactoryBean</span></span>() &#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = new ShiroFilterFactoryBean();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Filter&gt; filterMap = new HashMap&lt;&gt;(0);</span><br><span class="line">        // 配置jwt拦截器</span><br><span class="line">        filterMap.put(<span class="string">"jwt"</span>, new JwtFilter());</span><br><span class="line">        bean.setFilters(filterMap);</span><br><span class="line">        //就是被拦截下来的请求暂时都换成这个</span><br><span class="line">        bean.setLoginUrl(<span class="string">"/error"</span>);</span><br><span class="line"></span><br><span class="line">        bean.setSecurityManager(securityManager());</span><br><span class="line">        Map&lt;String, String&gt; map = new LinkedHashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"/**"</span>, <span class="string">"jwt"</span>);</span><br><span class="line">        map.put(<span class="string">"/error"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(map);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 添加注解权限 */</span><br><span class="line">    @Bean</span><br><span class="line">    @DependsOn(<span class="string">"lifecycleBeanPostProcessor"</span>)</span><br><span class="line">    public DefaultAdvisorAutoProxyCreator <span class="function"><span class="title">defaultAdvisorAutoProxyCreator</span></span>() &#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        defaultAdvisorAutoProxyCreator.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">return</span> defaultAdvisorAutoProxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public LifecycleBeanPostProcessor <span class="function"><span class="title">lifecycleBeanPostProcessor</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> new LifecycleBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(DefaultWebSecurityManager securityManager) &#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor advisor = new AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        advisor.setSecurityManager(securityManager);</span><br><span class="line">        <span class="built_in">return</span> advisor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置完成后就可以在Controller使用了，在需要登录才能访问的接口上访添加@RequiresAuthentication就行了。</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>shiro</tag>
        <tag>jwt</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
